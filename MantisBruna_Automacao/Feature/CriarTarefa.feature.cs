// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.1.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace MantisBruna_Automacao.Feature
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("CriarTarefa")]
    public partial class CriarTarefaFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "CriarTarefa.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "CriarTarefa", "\tAs a usuario do sistema\r\n\tI want incluir uma nova tarefa no mantis\r\n\tSo that sej" +
                    "a possivel controlar minhas tarefas", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 7
#line hidden
#line 8
 testRunner.Given("que eu acesso login", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Criar uma tarefa nova preenchendo todos os campos")]
        [NUnit.Framework.TestCaseAttribute("General", "Sempre", "pequeno", "administrator", "Teste Incluir 01", "Incluindo Tarefa", "Passos Criar 1", "add 1", null)]
        [NUnit.Framework.TestCaseAttribute("General", "Sempre", "pequeno", "administrator", "Teste Incluir 02", "Criar Tarefa", "Passos Criar 2", "add 2", null)]
        [NUnit.Framework.TestCaseAttribute("General", "Sempre", "pequeno", "administrator", "Teste Incluir 03", "Tarefa Criada", "Passos Criar 3", "add 3", null)]
        [NUnit.Framework.TestCaseAttribute("General", "Sempre", "pequeno", "administrator", "Teste Incluir 04", "Teste Criar Tarefa", "Passos Criar 4", "add 4", null)]
        [NUnit.Framework.TestCaseAttribute("General", "Sempre", "pequeno", "administrator", "Teste Incluir 05", "Incluindo Tarefa 02", "Passos Criar 5", "add 5", null)]
        [NUnit.Framework.TestCaseAttribute("General", "Sempre", "pequeno", "administrator", "Teste Incluir 06", "Incluindo Tarefa 03", "Passos Criar 6", "add 6", null)]
        public virtual void CriarUmaTarefaNovaPreenchendoTodosOsCampos(string categoria, string frequencia, string gravidade, string atribuir, string resumo, string descricao, string passos, string adicionais, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Criar uma tarefa nova preenchendo todos os campos", null, exampleTags);
#line 12
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
this.FeatureBackground();
#line hidden
#line 13
 testRunner.Given("que acesso a opcao no menu Criar Nova Tarefa", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "dado",
                            "valor"});
                table1.AddRow(new string[] {
                            "categoria",
                            string.Format("{0}", categoria)});
                table1.AddRow(new string[] {
                            "frequencia",
                            string.Format("{0}", frequencia)});
                table1.AddRow(new string[] {
                            "gravidade",
                            string.Format("{0}", gravidade)});
                table1.AddRow(new string[] {
                            "atribuir",
                            string.Format("{0}", atribuir)});
                table1.AddRow(new string[] {
                            "resumo",
                            string.Format("{0}", resumo)});
                table1.AddRow(new string[] {
                            "descricao",
                            "<descricao"});
                table1.AddRow(new string[] {
                            "passos",
                            string.Format("{0}", passos)});
                table1.AddRow(new string[] {
                            "adicionais",
                            string.Format("{0}", adicionais)});
#line 14
 testRunner.When("informo dados da tarefa", ((string)(null)), table1, "When ");
#line hidden
#line 24
 testRunner.And("clico em criar nova tarefa", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Criar uma tarefa nova preenchendo somente os campos obrigatorios")]
        [NUnit.Framework.TestCaseAttribute("General", "Teste obrigatorio 1", "Incluindo obrigatorio", null)]
        [NUnit.Framework.TestCaseAttribute("General", "Teste obrigatorio 2", "Criar obrigatorio", null)]
        [NUnit.Framework.TestCaseAttribute("General", "Teste obrigatorio 3", "Tarefa obrigatorio", null)]
        [NUnit.Framework.TestCaseAttribute("General", "Teste obrigatorio 4", "Teste obrigatorio", null)]
        public virtual void CriarUmaTarefaNovaPreenchendoSomenteOsCamposObrigatorios(string categoria, string resumo, string descricao, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Criar uma tarefa nova preenchendo somente os campos obrigatorios", null, exampleTags);
#line 36
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
this.FeatureBackground();
#line hidden
#line 37
 testRunner.Given("que acesso a opcao no menu Criar Nova Tarefa", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "dado",
                            "valor"});
                table2.AddRow(new string[] {
                            "categoria",
                            string.Format("{0}", categoria)});
                table2.AddRow(new string[] {
                            "resumo",
                            string.Format("{0}", resumo)});
                table2.AddRow(new string[] {
                            "descricao",
                            "<descricao"});
#line 38
 testRunner.When("informo somente campos obrigatorios", ((string)(null)), table2, "When ");
#line hidden
#line 43
 testRunner.And("clico em criar nova tarefa", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Criar uma tarefa sem preenchimento do campo obrigatorio e validar mensagem")]
        [NUnit.Framework.TestCaseAttribute("Sempre", "pequeno", "administrator", "Passos Criar 6", "add 0", null)]
        [NUnit.Framework.TestCaseAttribute("Sempre", "pequeno", "administrator", "Passos Criar 7", "add 9", null)]
        [NUnit.Framework.TestCaseAttribute("Sempre", "pequeno", "administrator", "Passos Criar 8", "add 8", null)]
        [NUnit.Framework.TestCaseAttribute("Sempre", "pequeno", "administrator", "Passos Criar 9", "add 7", null)]
        [NUnit.Framework.TestCaseAttribute("Sempre", "pequeno", "administrator", "Passos Criar 0", "add 6", null)]
        public virtual void CriarUmaTarefaSemPreenchimentoDoCampoObrigatorioEValidarMensagem(string frequencia, string gravidade, string atribuir, string passos, string adicionais, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Criar uma tarefa sem preenchimento do campo obrigatorio e validar mensagem", null, exampleTags);
#line 55
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
this.FeatureBackground();
#line hidden
#line 56
 testRunner.Given("que acesso a opcao no menu Criar Nova Tarefa", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "dado",
                            "valor"});
                table3.AddRow(new string[] {
                            "frequencia",
                            string.Format("{0}", frequencia)});
                table3.AddRow(new string[] {
                            "gravidade",
                            string.Format("{0}", gravidade)});
                table3.AddRow(new string[] {
                            "atribuir",
                            string.Format("{0}", atribuir)});
                table3.AddRow(new string[] {
                            "passos",
                            string.Format("{0}", passos)});
                table3.AddRow(new string[] {
                            "adicionais",
                            string.Format("{0}", adicionais)});
#line 57
 testRunner.When("informo somente campos nao obrigatorios", ((string)(null)), table3, "When ");
#line hidden
#line 64
   testRunner.And("clico em criar nova tarefa", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
